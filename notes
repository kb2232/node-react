TOOLS USED
1. express server
2. mongodb + passportJS (authentication)
3. Stripe (Handling payments) + mongodb
4. React + redux (front end)
5. React + redux + redux form (front end - collecting information)
6. email provider
7. email provider + express + mongo

NODE:
is used to run JS code outside the browser. Traditionally, JS code was executed inside the browser.

EXRPESS:
is a library that runs in the Node runtime - it is consider a node framework. Everything in express, in theory, can be written with pure node. It makes our life easier.

1. app.js 
this is the startup file - root file
modules: 
  - express, 

HEROKU DEPLOYEMENT
- it is good to deploye early to ensure your app is working.

1. heroku requires a few things needed inorder to be deployed.
    1. dynamic port binding - heroku tells us which door number information is coming from. So we need to prep our root file dynamically
    2. node version - we want to use specific version of node and NOT the one heroku tells us to use. So we need to tell heroku which version we are using
    3. npm start - instruct heroku what command to run to start server running
    4. create .gitignore file - we do not want to include dependencies, heroku takes care of that

2. Subsequent deploys
  1.  commit codebase with git
  2.  deploy app with git

3. incase you want to delete app in heroku
  1. heroku apps:destroy appname

USER SIGNS IN WITH GOOGLE OAUTH
look at xml diagrams xml/
  - passportJS
1. setting up passport is the first step


////Below is example of a simple working application////
var express = require('express');

//the first application
/*
the app object is used to listen to incoming request via a door (port)
*/
var app = express();

/*
here, i am creating a route to handle a specific request.
the below route-handler says, if the request is to "get" a webpage 'localhost:5000/', then respond back to the requester with a hi message.
*/
app.get('/', (req, res) => {
	res.send({ bye: 'friend' });
});
/*
Express has different types of methods to respond to information:
1. get - get information
2. post - send info
3. put - update ALL properties of something
4. delete - delete something
5. patch - update one or two properties of something
*/


/*
information is coming through door 5000. 
my app is listening to the information.
*/

//create a dynamic port for deployement - check notes
var PORT = process.env.PORT || 5000;
app.listen(PORT);
/*
process.env.PORT is used by heroku or dynamically(@runtime) generate a port number for us OR If no port number is generated, use door 5000.
*/